nest_
    _
        roost(nest_) -- sets self as roost, passes down
        is_roost
        init -- callback on roost()

        is_nest_ = true
        index (i)
        parent (p)
        enabled -- boolean or callback (en)
        order (o)

        groupidx = _group.index
        metacontrol_targets = { _metacontrol }

        check(groupidx, args, metacontrols) -- pass to children
        look(groupidx) -- pass to children, sort by z
        draw(_group.id, method, args...) -- passed to parent (if is_roost then to _group)

        print() -- print all member keys

    *
    {} / nest_ -- table becomes nest via __newindex
    _control
    _meta = {} -- properties discoverable by siblings and nephews


CONCEPT: in place of value + eddvent, we can use a param, state is stored in param

_control
    * -- (referenced by input and output)
    value -- {} (v)

    event -- callback on input (args: value, meta) (e)
    order (o)
    enabled -- boolean or callback

    _
        inputs[] -- _input
            input -- interface -> value (+meta)
                enabled -- boolean or callback
        outputs[] -- _output
            output -- value -> interface
                enabled -- boolean or callback

        is_control_ = true
        parent -- (p)
        index -- (i)

        groupidx = _group.index
        metacontrol_targets = { _metacontrol }

        check(_group.id, args, metacontrols) -- passed to input
        look(_group.id) -- passed to output
        draw(_group.id, method, args...) -- passed to parent
        print() -- print all member keys
        link(param.id) -- link

        set(v, silent) -- set v + draw
        get() -- get v
        print() -- print all member keys

_input
    _
        is_input
        control
        check(args, metacontrols) -- evaluate value change, if change pass to metacontrols
        transform
        handler

_output
    _
        is_output
        control
        look(_group.id) -- call draw() on control or group
        transform

_metacontrol
    _
        is_metacontrol
        pass

    targets -- append self to target.metacontrol_targets on set
    target -- targets[0]

_group -- stored in global variables & nest_api.groups
    _
        index

    nest_
    _control
    _group

nest_api -- stored in global variable
    draw() -- passed to roost
    roost = nest_
    init()
    groups = { _group }

_grid
    _
        vport
        enabled
        grid -- the grid object

        check(x, y, z) -- input handler for vport, passes roost.check(self.index, {x,y,z,t}, {})
        look() -- calls roost.look(self.index)
        draw(method, args...) -- called by _grid.control instances

    _control


_grid.control / _grid.metacontrol
    _

    x
    y
    lvl -- = { on, off } , when enum { lvl0, lvl1, lvl2, lvl3, etc }

_grid.control.input
    handler
    handlers
        point
            function
        line
            function
        plane
            function

_grid.control.output
    handler
    handlers
        point
        line_x
        line_y
        plane

_grid.momentary
_grid.toggle
_grid.value
_grid.enum

_screen
    _
        enabled
        look() -- called by global redraw, calls roost.look(self.index)
        draw(method, args...) -- called by _screen.control instances

    _control

_screen.control / _screen.metacontrol
    x
    y
    lvl

_screen.param

_enc
    _
        check(n, d) -- called by global enc(), passes roost.check(self.index, {n, d}, {})

    _control


_enc.control / _enc.metacontrol
    n

_enc.param -- no internal data, linked to param instead
    id

_key
    _
        check(n, z) -- called by global key(), passes roost.check(self.index, {n, z}, {})

_key.control / _key.metacontrol
    n

_key.param
    id
